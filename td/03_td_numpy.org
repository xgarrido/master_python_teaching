#+TITLE:  Librairie =numpy= & =pandas=
#+AUTHOR: Xavier Garrido
#+DATE:   15/01/2020
#+OPTIONS: toc:nil ^:{}
#+LATEX_HEADER: \setcounter{chapter}{2}
#+PROPERTY: header-args:jupyter-python :session 03_td_numpy
# #+BIND: org-latex-image-default-width "0.5\\linewidth"

#+COMMENT: https://www.machinelearningplus.com/101-numpy-exercises-python/

* Création/manipulation de tableaux

- Créer un vecteur contenant les nombres entiers de 0 à 9 puis n'afficher que les valeurs paires de
  ce vecteur. Remplacer ensuite ces valeurs paires par -1.

- Créer un vecteur de 20 valeurs flottantes réparties uniformément entre 1 et 50. À l'aide de la
  fonction =where= de =numpy=, remplacer les valeurs inférieures à 10 par 10 et celle supérieure à 30
  par 30.

- Créer les matrices suivantes en respectant le type et en 3 opérations maximum
  #+BEGIN_SRC latex
    \begin{align*}
      \begin{bmatrix}
        1&1&1&1\\
        1&1&1&1\\
        1&1&1&2\\
        1&6&1&1\\
      \end{bmatrix}&\quad
      \begin{bmatrix}
        0.& 0.& 0.& 0.& 0.\\
        2.& 0.& 0.& 0.& 0.\\
        0.& 3.& 0.& 0.& 0.\\
        0.& 0.& 4.& 0.& 0.\\
        0.& 0.& 0.& 5.& 0.\\
        0.& 0.& 0.& 0.& 6.\\
      \end{bmatrix}
    \end{align*}
  #+END_SRC
  Dans le second cas, on pourra s'aider de la méthode =diag=

- En utilisant la méthode =tile=, reproduire la matrice suivante à l'aide d'une seule commande
  #+BEGIN_SRC latex
    \begin{align*}
      \begin{bmatrix}
        4& 3& 4& 3& 4& 3\\
        2& 1& 2& 1& 2& 1\\
        4& 3& 4& 3& 4& 3\\
        2& 1& 2& 1& 2& 1\\
      \end{bmatrix}
    \end{align*}
  #+END_SRC

** Correction                                                   :correction:
:PROPERTIES:
:HEADER-ARGS: :tangle scripts/matrix.py
:END:
-
  #+BEGIN_SRC python
    import numpy as np
    v = np.arange(0, 10)
    v[v%2 == 1] = -1
  #+END_SRC

-
  #+BEGIN_SRC ipython
    import numpy as np
    v = np.random.uniform(1, 50, 20)
    v = np.where(v < 10, 10, np.where(v > 30, 30, v))
  #+END_SRC

-
  #+BEGIN_SRC python
    import numpy as np
    M = np.ones((4,4))
    M[2,3] = 2
    M[3,1] = 6
    print(M)
  #+END_SRC

  #+BEGIN_SRC python
    import numpy as np
    M = np.diag([2, 3, 4, 5, 6], k=-1)
    M = M[:, :5]
    print(M)
  #+END_SRC

-
  #+BEGIN_SRC python
    import numpy as np
    M = np.tile([[4,3], [2, 1]], (2, 3))
    print(M)
  #+END_SRC

* Fonctions universelles

- Créer un tableau à une dimension contenant 1 million de valeurs aléatoires comprises entre 1 et
  100

- Créer une fonction =inverse= qui, à l'aide d'une boucle =for=, retournera un second tableau résultat
  de l'opération d'inversion du premier tableau

- À l'aide de la fonction intégrée =%timeit= de l'interpréteur =ipython=, estimer le temps moyen
  nécessaire à l'exécution de la fonction =inverse=

- Estimer ce même temps d'exécution, en utilisant l'opérateur division

** Correction                                                   :correction:

#+BEGIN_SRC jupyter-python :exports code
  In [1]: def inverse(value):
     ...:     output = np.empty(len(values))
     ...:     for i in range(len(values)):
     ...:         output[i] = 1./values[i]
     ...:     return output
     ...:

  In [2]: v = np.random.randint(1, 100, 1000000)

  In [3]: %timeit inverse(v)
  1 loop, best of 3: 2.46 s per loop

  In [4]: %timeit 1./v
  100 loops, best of 3: 6.45 ms per loop
#+END_SRC

* Sale temps sur Seattle

- Télécharger le fichier [[https://owncloud.lal.in2p3.fr/index.php/s/HlLjdrv0C9lLYl9][=seattle2014.csv=]] qui contient pour chaque jour de l'année 2014 (colonne
  1), la hauteur des précipitations exprimé en dixième de millimètres (colonne 2) ainsi que les
  températures maximale (colonne 3) et minimale (colonne 4), exprimées en dixième de degrés Celsius,
  à Seattle.

- Charger l'ensemble des données dans un tableau =numpy= en prenant bien garde au caractère délimitant
  chaque champ puis, après avoir converti la hauteur des précipitations en centimètres et les
  températures en degré Celsius, calculer les valeurs suivantes sur chacune des données du fichier
  (hauteur des précipitations, $T_\text{min}$ et $T_\text{max}$) :
  1) moyenne, médiane et écart type
  2) valeurs minimale et maximale
  3) les quantiles à 25% et 75%

- Afficher les valeurs ci-dessus pour la période estivale

- Calculer la hauteur totale d'eau tombée à Seattle en 2014

- Dénombrer le nombre total de jours dans l'année pendant lesquels il a plu à Seattle et déterminer
  combien de ces jours étaient pairs

** Correction                                                   :correction:

#+BEGIN_SRC jupyter-python -n :tangle scripts/seattle1.py :exports both
  import numpy as np

  def print_report(prcp, Tmin, Tmax):

      print("Hauteur des précipitations:")
      print("  valeur moyenne = {:.2f} cm".format(np.mean(prcp)))
      print("  valeur médiane = {:.2f} cm".format(np.median(prcp)))
      print("      écart type = {:.2f} cm".format(np.std(prcp)))
      print("     valeur min. = {:.2f} cm".format(np.min(prcp)))
      print("     valeur max. = {:.2f} cm".format(np.max(prcp)))
      print("  quantile à 25% = {:.2f} cm".format(np.percentile(prcp, 25)))
      print("  quantile à 75% = {:.2f} cm".format(np.percentile(prcp, 75)))
      print("\n")

      print("Température minimale:")
      print("  valeur moyenne = {:.2f} °C".format(np.mean(Tmin)))
      print("  valeur médiane = {:.2f} °C".format(np.median(Tmin)))
      print("      écart type = {:.2f} °C".format(np.std(Tmin)))
      print("     valeur min. = {:.2f} °C".format(np.min(Tmin)))
      print("     valeur max. = {:.2f} °C".format(np.max(Tmin)))
      print("  quantile à 25% = {:.2f} °C".format(np.percentile(Tmin, 25)))
      print("  quantile à 75% = {:.2f} °C".format(np.percentile(Tmin, 75)))
      print("\n")

      print("Température maximale:")
      print("  valeur moyenne = {:.2f} °C".format(np.mean(Tmax)))
      print("  valeur médiane = {:.2f} °C".format(np.median(Tmax)))
      print("      écart type = {:.2f} °C".format(np.std(Tmax)))
      print("     valeur min. = {:.2f} °C".format(np.min(Tmax)))
      print("     valeur max. = {:.2f} °C".format(np.max(Tmax)))
      print("  quantile à 25% = {:.2f} °C".format(np.percentile(Tmax, 25)))
      print("  quantile à 75% = {:.2f} °C".format(np.percentile(Tmax, 75)))
      print("\n")

  data = np.loadtxt("./data/seattle2014.csv", delimiter=",")

  day = data[:,0]
  prcp = data[:,1]/100 # cm
  Tmax = data[:,2]/10  # °C
  Tmin = data[:,3]/10  # °C

  print("* Valeurs annuelles")
  print_report(prcp, Tmin, Tmax)

  print("* Valeurs estivales")
  summer = (day > 20140401) & (day < 20140930)
  print_report(prcp[summer], Tmin[summer], Tmax[summer])

  print("Hauteur totale d'eau en 2014 : {} cm".format(np.sum(prcp)))
  print("Nombre de jours avec pluie : {}".format(np.sum(prcp > 0)))
  print("Nombre de jours pairs avec pluie : {}".format(np.sum((prcp > 0) & (day % 2 == 0))))
#+END_SRC

#+RESULTS:
#+begin_example
  ,* Valeurs annuelles
  Hauteur des précipitations:
    valeur moyenne = 0.34 cm
    valeur médiane = 0.00 cm
        écart type = 0.68 cm
       valeur min. = 0.00 cm
       valeur max. = 4.67 cm
    quantile à 25% = 0.00 cm
    quantile à 75% = 0.36 cm


  Température minimale:
    valeur moyenne = 8.66 °C
    valeur médiane = 9.40 °C
        écart type = 4.97 °C
       valeur min. = -6.00 °C
       valeur max. = 17.80 °C
    quantile à 25% = 5.60 °C
    quantile à 75% = 12.80 °C


  Température maximale:
    valeur moyenne = 17.00 °C
    valeur médiane = 16.10 °C
        écart type = 7.26 °C
       valeur min. = -1.60 °C
       valeur max. = 35.60 °C
    quantile à 25% = 11.10 °C
    quantile à 75% = 22.20 °C


  ,* Valeurs estivales
  Hauteur des précipitations:
    valeur moyenne = 0.18 cm
    valeur médiane = 0.00 cm
        écart type = 0.48 cm
       valeur min. = 0.00 cm
       valeur max. = 3.33 cm
    quantile à 25% = 0.00 cm
    quantile à 75% = 0.03 cm


  Température minimale:
    valeur moyenne = 11.92 °C
    valeur médiane = 12.80 °C
        écart type = 3.13 °C
       valeur min. = 4.40 °C
       valeur max. = 17.80 °C
    quantile à 25% = 10.00 °C
    quantile à 75% = 14.40 °C


  Température maximale:
    valeur moyenne = 22.32 °C
    valeur médiane = 22.20 °C
        écart type = 5.43 °C
       valeur min. = 11.10 °C
       valeur max. = 35.60 °C
    quantile à 25% = 18.90 °C
    quantile à 75% = 26.10 °C


  Hauteur totale d'eau en 2014 : 123.28 cm
  Nombre de jours avec pluie : 150
  Nombre de jours pairs avec pluie : 71
#+end_example

* Manipulation d'images

Une image n'est rien d'autre qu'une matrice où chaque pixel contient une information
colorimétrique. La notion de tableau /à la/ =numpy= est donc parfaitement adaptée à la représentation de
ces objets.

En fonction du système colorimétrique choisi, chaque pixel peut être:
- un nombre entier compris entre 0 et 255 ou un nombre flottant compris entre 0.0 et 1.0 quantifiant
  le niveau de gris du pixel,
- un triplet de valeurs $(R, V, B)$ soit entières (entre 0 et 255) soit flottantes (entre 0.0 et
  1.0) donnant respectivement le niveau de rouge, vert et bleu du pixel,
- un triplet de valeurs ($\ell, \alpha, \beta$) correspondant à la luminosité $\ell$, l'opposition
  bleu-jaune $\alpha$ et l'opposition vert-rouge $\beta$,
- ...

Les opérations mathématiques sur des tableaux =numpy= permettent ainsi de changer d'espaces
colorimétriques en minimisant le nombre d'opérations. De même, la sélection par masque permet
d'appliquer des transformations à des sous-espaces de l'image.

Dans la suite de l'exercice, on s'aidera des fonctions intégrées à la librairie =matplotlib= pour
lire et pour représenter une image au format =png= ou =jpeg=. On utilisera en particulier les
fonctions =imread= et =imshow= pour lire puis afficher l'image =matplotlib= comme suit
#+BEGIN_SRC python
  import matplotlib.pyplot as plt
  img = plt.imread("mon_image.png")
  plt.imshow(img)
#+END_SRC

** Changement d'espace colorimétrique

1) Créer une image de 500x500 pixels contenant du bruit blanc /i.e./ des valeurs aléatoirement
   réparties entre 0.0 et 1.0. Afficher l'image en utilisant l'échelle de couleur ~cmap="gray"~ (à
   passer en argument de la fonction =imshow=).

2) Charger l'image [[https://owncloud.lal.in2p3.fr/index.php/s/TyEPm59H6e0wr2k][=balloon.png=]] puis afficher la. Quelle est la taille de l'image ? Dans quel
   espace colorimétrique est-elle représentée ?

3) La calcul de la luminance =Y= d'un pixel (également appelé niveau de gris) se fait, à partir du
   système colorimétrique $(R, V, B)$, par la transformation
   #+BEGIN_SRC latex
     \begin{align*}
       Y &= 0.2126\times R+0.7152\times V+0.0722\times B
     \end{align*}
   #+END_SRC
   Convertir l'image initiale en niveau de gris et l'afficher.

*** Correction                                                 :correction:
1)
   #+BEGIN_SRC jupyter-python :exports both
     import numpy as np
     import matplotlib.pyplot as plt

     img = np.random.rand(500, 500)
     plt.imshow(img, cmap="gray");
   #+END_SRC

   #+ATTR_LATEX: :width 0.5\linewidth
   #+RESULTS:
   [[file:./.ob-jupyter/66754fb8b533bad401a48bf429515061832a53ef.png]]

2)
   #+BEGIN_SRC jupyter-python :exports code
     img = plt.imread("data/balloon.png")
     plt.imshow(img)
     print("Taille de l'image {}x{} pixels".format(*img.shape[:2]))
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   : Taille de l'image 300x225 pixels
   [[file:./.ob-jupyter/aeef88afc589d40d52c9ee3f0880a876b0ce6f35.png]]
   :END:

3)
    #+BEGIN_SRC jupyter-python :exports both
      img1 = np.dot(img, [0.2126, 0.7152, 0.0722])
      # ou img1 = img @ [0.2126, 0.7152, 0.0722] depuis Python 3.5
      fig, axes = plt.subplots(1, 2)
      axes[0].imshow(img)
      axes[1].imshow(img1, cmap="gray");
    #+END_SRC

    #+ATTR_LATEX: :width 0.5\linewidth
    #+RESULTS:
    [[file:./.ob-jupyter/1171a9bd6bc28e2eef0155d61be23812ba2a1b1f.png]]

** /Slices & masks/

1) Dans l'espace $(R, V, B)$, créer une image 600x600 pixels initialement colorée en noire.

2) Colorer en rouge et vert les rectangles représentés sur la figure de gauche ci-dessous.

3) En repartant d'une image complètement noire, colorer les disques représentés sur la figure de
   droite ci-dessous. /Indication : pour un centre de dique donné, on construira un tableau/
   /contenant, pour chaque pixel, la distance au centre de ce disque (on pourra s'aider de l'objet/
   /=ogrid= de =numpy=). On masquera par la suite les distances supérieures au rayon $R=150$, masques/
   /dont on se servira pour assigner les couleurs désirées./

#+BEGIN_SRC latex
  \begin{center}
    \tikzset{%
      >=latex, % option for nice arrows
      inner sep=0pt,%
      outer sep=2pt,%
      mark coordinate/.style={inner sep=0pt,outer sep=0pt,minimum size=3pt,
        fill=black,circle}%
    }
    \begin{tikzpicture}
      \sf\scriptsize
      \begin{scope}[]
        %% characteristic points
        \coordinate[mark coordinate] (O) at (0, 0);
        \coordinate[mark coordinate] (OO) at (6, -6);
        \coordinate[mark coordinate, fill=red] (A) at (4, -4);
        \coordinate[mark coordinate, fill=green] (B) at (2, -2);

        \draw (0, 0) node[above] {$(0, 0)$} rectangle (6, -6) node[below] {$(600, 600)$};
        \draw[dashed, red] (4, 0) -- (A);
        \draw[dashed, red] (0, -4) -- (A) node[below] {$A\,(400, 400)$};
        \draw[dashed, green] (6, -2) -- (B);
        \draw[dashed, green] (2, -6) -- (B) node[above] {$B\,(200, 200)$};
      \end{scope}

      \begin{scope}[xshift=7cm]
        %% characteristic points
        \coordinate[mark coordinate] (O) at (0, 0);
        \coordinate[mark coordinate] (OO) at (6, -6);
        \coordinate[mark coordinate, fill=red] (A) at (2, -2);
        \coordinate[mark coordinate, fill=green] (B) at (4, -2);
        \coordinate[mark coordinate, fill=blue] (C) at (3, -4);

        \draw (0, 0) node[above] {$(0, 0)$} rectangle (6, -6) node[below] {$(600, 600)$};
        \draw[dashed, red]   (A) node[above, fill=white] {$A\,(200, 200)$} circle (1.5);
        \draw[dashed, green] (B) node[above, fill=white] {$B\,(400, 200)$} circle (1.5);
        \draw[dashed, blue]  (C) node[below] {$C\,(300, 400)$} circle (1.5);
        \draw[->, green] (B) -- (5.5, -2) node[green, midway, below] {$R=150$};
      \end{scope}
    \end{tikzpicture}
  \end{center}
#+END_SRC

*** Correction                                                 :correction:

1)
   #+BEGIN_SRC jupyter-python :exports code
     import numpy as np
     img = np.zeros((600, 600, 3), dtype=np.float)
     plt.imshow(img);
   #+END_SRC

   #+RESULTS:
   [[file:./.ob-jupyter/17fe50762a13a0842e7fc068595b85362f605861.png]]

2)
   #+BEGIN_SRC jupyter-python :exports both
     img[:400, :400, 0] = 1.0
     img[200:, 200:, 1] = 1.0
     plt.imshow(img);
   #+END_SRC

   #+ATTR_LATEX: :width 0.5\linewidth
   #+RESULTS:
   [[file:./.ob-jupyter/d35ec2d89747e62cbe81d4245fa81053a454aa02.png]]

3)
   #+BEGIN_SRC jupyter-python :exports both
     import numpy as np
     img = np.zeros((600, 600, 3), dtype=np.float)
     iy, ix = np.ogrid[:600, :600]

     def get_mask(center=(300, 300), radius=150):
         dist2center = np.sqrt((ix - center[0])**2 + (iy - center[1])**2)
         mask = dist2center < radius
         return dist2center, mask

     dist2center, mask = get_mask()

     plt.imshow(dist2center)
     cbar = plt.colorbar()
     cbar.set_label("distance to disk center")
   #+END_SRC

   #+ATTR_LATEX: :width 0.5\linewidth
   #+RESULTS:
   [[file:./.ob-jupyter/646ce47b844bd1635ab27ab71ea3c662eec54101.png]]

   #+BEGIN_SRC jupyter-python :exports both
     dist2center, mask = get_mask(center=(200, 200))
     img[mask, 0] = 1
     dist2center, mask = get_mask(center=(400, 200))
     img[mask, 1] = 1
     dist2center, mask = get_mask(center=(300, 400))
     img[mask, 2] = 1

     plt.imshow(img);
   #+END_SRC

   #+ATTR_LATEX: :width 0.5\linewidth
   #+RESULTS:
   [[file:./.ob-jupyter/946fdb396275194c82a9bfe9f2f82090561adf88.png]]

#+COMMENT: https://stackoverflow.com/questions/44865023/circular-masking-an-image-in-python-using-numpy-arrays/44874588

** /Prologue:/ Transfert de couleurs

Reprendre le projet C++ "Transfert de couleurs" qui consiste à transférer les propriétés
colorimétriques d'une image source à une image cible. Pour ce faire, on considère l'image [[https://owncloud.lal.in2p3.fr/index.php/s/Cp0xWg01B5VVDRu][source.png]]
à laquelle on souhaite appliquer les propriétés statistiques de couleurs de l'image [[https://owncloud.lal.in2p3.fr/index.php/s/9fOSMIvYpDbnoU2][cible.png]]. Il
s'agit, dans un premier temps, de transformer l'espace de couleur $(R, V, B)$ des deux images vers
l'espace colorimétrique $(\ell, \alpha, \beta)$. On applique ainsi les transformations suivantes
#+BEGIN_SRC latex
  \begin{align*}
    \begin{pmatrix}L\\M\\S\end{pmatrix}&=
      \begin{pmatrix}
        0.3811&0.5783&0.0402\\
        0.1967&0.7244&0.0782\\
        0.0241&0.1288&0.8444
      \end{pmatrix}
      \begin{pmatrix}R\\V\\B\end{pmatrix}\\
        \begin{pmatrix}\ell\\\alpha\\\beta\end{pmatrix}&=
          \begin{pmatrix}
            1/\sqrt{3}&0&0\\
            0&1/\sqrt{6}&0\\
            0&0&1/\sqrt{2}
          \end{pmatrix}
          \begin{pmatrix}
            1&1&1\\
            1&1&-2\\
            1&-1&0
          \end{pmatrix}
          \begin{pmatrix}\ln L\\\ln M\\\ln S\end{pmatrix}
  \end{align*}
#+END_SRC

Une fois dans l'espace $(\ell, \alpha, \beta)$, il s'agit de transférer les propriétés statistiques,
moyenne et écart-type, de chaque canal soit
#+BEGIN_SRC latex
  \begin{align*}
    \ell_t&=\frac{\sigma^\ell_c}{\sigma^\ell_s}\left(\ell_s-\langle\ell_s\rangle\right)+\langle\ell_c\rangle\\
    \alpha_t&=\frac{\sigma^\alpha_c}{\sigma^\alpha_s}\left(\alpha_s-\langle\alpha_s\rangle\right)+\langle\alpha_c\rangle\\
    \beta_t&=\frac{\sigma^\beta_c}{\sigma^\beta_s}\left(\beta_s-\langle\beta_s\rangle\right)+\langle\beta_c\rangle
  \end{align*}
#+END_SRC
où les indices $t, s, c$ correspondent respectivement à l'image "transférée", source et cible.

Finalement, il convient de revenir à l'espace colorimétrique $(R, V, B)$ pour l'image "transférée"
/via/ les transformations inverses
#+BEGIN_SRC latex
     \begin{align*}
       \begin{pmatrix}L\\M\\S\end{pmatrix}&=
         \begin{pmatrix}
           1&1&1\\
           1&1&-1\\
           1&-2&0
         \end{pmatrix}
         \begin{pmatrix}
         1/\sqrt{3}&0&0\\
         0&1/\sqrt{6}&0\\
         0&0&1/\sqrt{2}
         \end{pmatrix}
         \begin{pmatrix}\ell\\\alpha\\\beta\end{pmatrix}\\
       \begin{pmatrix}R\\V\\B\end{pmatrix}&=\begin{pmatrix}
         4.4679&-3.5873&0.1193\\
         -1.2186&2.3809&-0.1624\\
         0.0497&-0.2439&1.2045
         \end{pmatrix}\begin{pmatrix}\exp L\\\exp M\\\exp S\end{pmatrix}\\
     \end{align*}
 #+END_SRC

*** Correction                                                 :correction:
#+BEGIN_SRC jupyter-python :exports both
  import numpy as np
  import matplotlib.pyplot as plt

  M1 = np.array([
      [0.3811, 0.5783, 0.0402],
      [0.1967, 0.7244, 0.0782],
      [0.0241, 0.1288, 0.8444]
  ])
  M2 = np.array([
      [1/np.sqrt(3), 0, 0],
      [0, 1/np.sqrt(6), 0],
      [0, 0, 1/np.sqrt(2)]
  ])
  M3 = np.array([
      [1, 1, 1],
      [1, 1, -2],
      [1, -1, 0]
  ])

  M4 = M3.T
  M5 = M2
  M6 = np.array([
      [4.4679, -3.5873, 0.1193],
      [-1.2186, 2.3809, -0.1624],
      [0.0497, -0.2439, 1.2045]
  ])

  img_source = plt.imread("./data/source.png")
  img_cible = plt.imread("./data/cible.png")

  img_source_LMS = np.dot(img_source, M1)
  img_cible_LMS = np.dot(img_cible, M1)
  img_source_lab = np.dot(np.log(img_source_LMS), np.dot(M2, M3))
  img_cible_lab = np.dot(np.log(img_cible_LMS), np.dot(M2, M3))

  mean_source_lab, std_source_lab = np.mean(img_source_lab, axis=(0,1)), np.std(img_source_lab, axis=(0,1))
  mean_cible_lab, std_cible_lab = np.mean(img_cible_lab, axis=(0,1)), np.std(img_cible_lab, axis=(0,1))

  img_transfer_lab = std_cible_lab/std_source_lab*(img_source_lab - mean_source_lab) + mean_cible_lab

  img_transfer_LMS = np.dot(img_transfer_lab, np.dot(M4, M5))
  img_transfer = np.dot(np.exp(img_transfer_LMS), M6)

  fig, axes = plt.subplots(1, 3, figsize=(12, 4))
  for ax in axes:
    ax.axis("off")
  axes[0].imshow(img_source)
  axes[0].set_title("source")
  axes[1].imshow(img_cible)
  axes[1].set_title("cible")
  axes[2].imshow(img_transfer)
  axes[2].set_title("résultat");
#+END_SRC

#+RESULTS:
:RESULTS:
: Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
[[file:./.ob-jupyter/daac5afb335aacbe4f5f93076a5f3bd92fd54d69.png]]
:END:
