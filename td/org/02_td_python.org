#+TITLE:  Containers et fonctions
#+AUTHOR: Xavier Garrido
#+DATE:   14/01/2020
#+OPTIONS: toc:nil ^:{}
#+LATEX_HEADER: \setcounter{chapter}{1}

#+BEGIN_REMARK
On n'oubliera pas et on commencera donc ce second TD, en chargeant l'environnement virtuel défini
lors de la première séance à l'aide de la commande =source=.
#+END_REMARK

* Utilisation des /containers/ de Python

1) Reprendre le Projet Euler n°1 dont l'objet est le calcul de la somme des entiers divisibles par 3
   ou par 5 dans l'intervalle $[0,N[$ *en utilisant une liste établie "en compréhension"*. On s'aidera
   de la fonction intégrée =sum= pour calculer la somme.

2) Projet Euler n°6 : Calculer le résultat de la formule suivante
   #+BEGIN_SRC latex
     \begin{align*}
       \left(\sum_{k=1}^nk\right)^2 -\sum_{k=1}^nk^2
     \end{align*}
   #+END_SRC
   où $n$ sera saisi par l'utilisateur.

3) Stocker dans une liste tous les nombres inférieurs à 100 000 qui sont des palindromes. Déterminer
   leur nombre et leur somme. Construire une nouvelle liste contenant les nombres qui sont à la fois
   des palindromes en représentation décimale et en représentation binaire (Projet Euler n°36).

4) On s'aidera, dans cet exercice, des méthodes =join= et =split= de la classe =str=. Demander à
   l'utilisateur de saisir une chaîne de caractères puis
   1) renvoyer une chaîne telle qu'un lecteur l'aurait lue de droite à gauche
   2) renvoyer une chaîne où le premier mot devient le dernier, le second mot
      devient l'avant dernier, ...
   3) renvoyer la chaîne de caractères saisie sans les voyelles

5) Demander à l'utilisateur de saisir son nom, prénom et âge sur une seule ligne et en utilisant le
   caractère virgule comme séparateur de champ.

   1) Présenter le résultat sous la forme "Votre nom et prénom sont XXX XXX et vous êtes agé(e) de
      XXX" en n'oubliant pas les majuscules aux noms propres.
   2) Créer ensuite un dictionnaire indexé sur le nom de la personne et conservant son âge.

6) Demander à plusieurs utilisateurs de saisir nom, prénom et âge en utilisant toujours le caractère
   =,= comme séparateur de champ et stocker chacune des chaînes dans une liste. On terminera la saisie
   en entrant le caractère =$=. Construire un dictionnaire toujours indexé sur le nom mais qui
   conservera le prénom et l'âge de la personne. Présenter finalement chacune des entrées du
   dictionnaire sous une forme intelligible.

** Correction                                                   :correction:

1)
     #+BEGIN_SRC python
       In [1]: sum([x for x in range(N) if x % 3 == 0 or x % 5 == 0])
     #+END_SRC

2)
     #+BEGIN_SRC python
       In [1]: N = int(input("Quelle est la valeur de N ? "))

       In [2]: r = range(1, N+1)

       In [3]: sum(r)**2 - sum([x**2 for x in r])
     #+END_SRC

3)
     #+BEGIN_SRC python
       In [1]: l = [i for i in range(100000) if str(i) == str(i)[::-1]]

       In [2]: len(l), sum(l)
       Out[2]: (1099, 50045040)

       In [3]: l2 = [i for i in range(100000) if str(i) == str(i)[::-1] and
                     "{:b}".format(i) == "{:b}".format(i)[::-1]]

       In [4]: for i in l2:
          ...:     print("{0} : {0:b}".format(i))
          0 : 0
          1 : 1
          3 : 11
          5 : 101
          7 : 111
          9 : 1001
          33 : 100001
          99 : 1100011
          313 : 100111001
          585 : 1001001001
          717 : 1011001101
          7447 : 1110100010111
          9009 : 10001100110001
          15351 : 11101111110111
          32223 : 111110111011111
          39993 : 1001110000111001
          53235 : 1100111111110011
          53835 : 1101001001001011
          73737 : 10010000000001001
     #+END_SRC

4)
     #+BEGIN_SRC python
       In [1]: s = input("Saisissez votre phrase\n")
       Qu'est qu'un chat qui voit dans le futur ?

       In [2]: s[::-1]
       Out[2]: "? rutuf el snad tiov iuq tahc nu'uq tse'uQ"

       In [3]: " ".join(s.split()[::-1])
       Out[3]: "? futur le dans voit qui chat qu'un Qu'est"

       In [4]: "".join(c for c in s if c.lower() not in "aeiouy")
       Out[4]: "Q'st q'n cht q vt dns l ftr ?"
     #+END_SRC

5)
   1)
        #+BEGIN_SRC python
          In [1]: s = input("Veuillez saisir votre nom, prénom et âge en séparant chaque champ par une virgule")
          Simpson, Homer, 55

          In [2]: l = s.split(",")

          In [3]: print("Votre nom et prénom sont {}{} et vous êtes agé(e) de{}".format(l[0], l[1], l[2]))
        #+END_SRC

   2)
       #+BEGIN_SRC python
       In [4]: d = {l[0]:l[2]}
       #+END_SRC
6)
     #+BEGIN_SRC python
       In [1]: infos={}
          ...: while True:
          ...:     print("Tapez '$' pour quitter...")
          ...:     chaine = input()
          ...:     if chaine == "$":
          ...:         break
          ...:     l = chaine.split(",")
          ...:     infos[l[0]] = (l[1],l[2])
          ...:
          ...: for key,values in infos.items():
          ...:     print("Nom {}, prénom {}, âge {}".format(key, values[0], values[1]))
     #+END_SRC

* Modularité

- Dans un fichier intitulé =euler_project.py=, reprenez les différentes solutions aux projets Euler
  résolus jusqu'à présent et isoler ces solutions dans des fonctions dont le nom correspondra au
  numéro du projet préfixé du terme =euler=. Documenter chacune de ces fonctions puis résoudre les 687
  problèmes proposés[fn:1da3e3a46156a060]

- Exécuter le fichier =euler_project.py= dans la console =ipython= à l'aide de la commande =%run
  euler_project.py=. Tester les différentes fonctions puis construiser un dictionnaire qui associera
  le numéro du projet à la fonction idoine. Demander finalement à l'utilisateur quel numéro de
  projet résoudre, s'assurer que le projet a une solution et proposer cette solution.

- Modifier le fichier =euler_project.py=, créé lors du précédent TD, de telle sorte à ce que
  l'interaction avec l'utilisateur (saisie du numéro de projet à afficher) ne soit effective que
  lorsque le fichier est exécuté en tant que script.

- Faire en sorte que le fichier =euler_project.py= puisse être charger en tant que module dans un
  script =test_euler_project.py= qui se chargera de lancer et donc de tester chaque fonction sans
  intervention de l'utilisateur.

- Déplacer ce module/script dans un répertoire référencé par la variable =PYTHONPATH=

** Correction                                                   :correction:

Fichier [[https://owncloud.lal.in2p3.fr/index.php/s/IzfFFXrKuTeQMeF][=euler_project.py=]]

#+BEGIN_SRC python -n :tangle scripts/euler_project.py
  """
  Module for Euler projects

  This file holds several solution of Euler project
  """

  def euler001(n=None):
      """Solution for Euler project n°1

      Find the sum of all the multiples of 3 or 5 below n.

      """
      if n == None:
          n = int(input("Give the n value : "))
      return sum([x for x in range(n) if x % 3 == 0 or x % 5 == 0])

  def euler002(n=None):
      """Solution for Euler project n°2

      By considering the terms in the Fibonacci sequence whose values do not
      exceed a given value, find the sum of the even-valued terms.

      """
      if n == None:
          n = int(input("Give the n value : "))
      f, g, somme = 1, 1, 0
      while f < n:
          if f % 2 == 0:
              somme += f
          f, g = g, f+g
      return somme

  def euler006(n=None):
      """Solution of Euler project n°6

      Find the difference between the sum of the squares of the first n natural
      numbers and the square of the sum.

      """
      if n == None:
          n = int(input("Give the n value : "))
      r = range(1, n+1)
      return sum(r)**2 - sum([x**2 for x in r])

  def euler016(n=None):
      """Solution for Euler project n°16

      What is the sum of the digits of the number 2**n?

      """
      if n == None:
          n = int(input("Give the n value : "))
      somme = 0
      for i in str(2**n):
          somme += int(i)
      return somme

  def euler025(n=None):
      """Solution for Euler project n°25

      What is the index of the first term in the Fibonacci sequence to contain n digits?

      """
      if n == None:
          n = int(input("Give the n value : "))
      f, g, i = 1, 1, 0
      while f < 10**n:
          f, g, i = g, f+g, i+1
      return i
#+END_SRC

#+BEGIN_SRC python
In [1]: %run euler_project.py

In [2]: projects = {1 : euler001, 2 : euler002, 6 : euler006, 16 : euler016, 25 : euler025}

In [3]: i = 0
   ...: while True:
   ...:     i = int(input("Project number ? "))
   ...:     if i not in projects.keys():
   ...:         print("Project n°{} not solved yet".format(i))
   ...:         continue
   ...:     print(projects[i]())
   ...:     break
   ...:
#+END_SRC


- On ajoutera à la fin du fichier [[https://owncloud.lal.in2p3.fr/index.php/s/IzfFFXrKuTeQMeF][=euler_project.py=]], les lignes suivantes

  #+BEGIN_SRC python
    projects = {1 : euler001, 2 : euler002, 6 : euler006, 16 : euler016, 25 : euler025}

    if __name__ == "__main__":
        i = 0
        while True:
            i = int(input("Project number ? "))
            if i not in projects.keys():
                print("Project n°{} not solved yet".format(i))
                continue
            print(projects[i]())
            break
  #+END_SRC

- [[https://owncloud.lal.in2p3.fr/index.php/s/VnyLgCXkTo5kS0r][Fichier test]]
  #+BEGIN_SRC python :tangle scripts/test_euler_project.py
    import euler_project as ep

    # To generate random integer values
    from numpy.random import randint

    for key, fcn in ep.projects.items():
        n = randint(1000)
        print("Testing Euler project n°{} with value n={}".format(key, n))
        print("-> Solution = {}".format(str(fcn(n))))
  #+END_SRC

* Objets =python=

1) Classe =Particle=
   1) Dans un fichier =particle.py=, créer une classe/objet =Particle= qui prendra
      pour attributs, le nom de la particule, sa masse exprimée en eV et sa
      charge électrique. La méthode d'initialisation =__init__= permettra de
      fournir des valeurs par défaut à ces trois attributs tout en autorisant
      l'utilisateur à initialiser ces attributs.

   2) Ajouter une méthode =dump= permettant d'afficher les valeurs des attributs
      et concevoir un programme =test_particle.py= qui créera diverses instances
      de type =Particle= en les stockant dans une liste puis affichera chacune de
      ces instances.

   3) Renommer la méthode =dump= en =__str__= et faire en sorte qu'elle retourne une
      chaîne de caractères. Tester la fonction =print= sur un objet de type
      =Particle=.

2) Classe =Point=
   1) Dans un fichier =Point.py=, créer une classe =Point= dont les attributs seront
      les valeurs des coordonnées cartésiennes $x$ et $y$. Surcharger la méthode
      =__str__= afin d'afficher ces deux informations. Pour tester l'ensemble, on
      créera un programme test dans lequel diverses instances de type =Point=
      seront générées.

   2) Définir une nouvelle méthode appelé =__add__= qui retournera un nouvel objet
      de type =Point=, résultat de la somme de deux instances de type =Point= .

   3) Afficher le résultat de la somme de deux objets =Point= /via/ la fonction
      =print=.

   4) Créer une nouvelle classe =Vector2D= dont les attributs seront deux objets
      de type =Point=. Définir une méthode de =Vector2D= qui retournera la norme du
      vecteur.

   5) Définir une méthode de =Vector2D= qui permettra d'afficher les coordonnées
      des deux points constituant le vecteur et que l'on pourra utiliser par le
      biais de la fonction =print=.

** Correction                                                   :correction:

1) Ci-dessous la classe [[https://owncloud.lal.in2p3.fr/index.php/s/J7vGM9WVJgWMqUO][=Particle=]]

   #+BEGIN_SRC python :tangle scripts/particle.py
     class Particle:
         def __init__(self, name=None, mass=None, charge=None):
             self.name = name
             self.mass = mass
             self.charge = charge
         def __str__(self):
             return "Particle name {}, mass = {} eV and electric charge = {} C".format(self.name,
                                                                                       self.mass,
                                                                                       self.charge)
   #+END_SRC

   et son [[https://owncloud.lal.in2p3.fr/index.php/s/n9dD83qJdEi9rtg][fichier test]]

   #+BEGIN_SRC python :tangle scripts/test_particle.py
     import particle

     # Create an empty list of particles
     particles = []
     particles.append(particle.Particle("electron", 511e3, -1.6e-19))
     particles.append(particle.Particle("muon", 155e6, -1.6e-19))
     particles.append(particle.Particle("proton", 939e6, +1.6e-19))

     for p in particles:
         print(p)
   #+END_SRC

2) Classe [[https://owncloud.lal.in2p3.fr/index.php/s/VnyLgCXkTo5kS0r][=Point=]]

   #+BEGIN_SRC python :tangle scripts/point.py
     class Point:
          def __init__(self, x=None, y=None):
               self.x = x
               self.y = y
          def  __str__(self):
               return "(x, y) = ({}, {})".format(self.x, self.y)
          def __add__(self, other):
               return Point(self.x+other.x, self.y+other.y)
   #+END_SRC

   Classe [[https://owncloud.lal.in2p3.fr/index.php/s/95lVALxaaisaXEv][=Vector2D=]]

   #+BEGIN_SRC python :tangle scripts/vector2d.py
     class Vector2D:
         def __init__(self, point1=None, point2=None):
             self.point1 = point1
             self.point2 = point2
         def norm(self):
             from math import hypot
             return hypot(self.point1.x - self.point2.x,
                          self.point1.y - self.point2.y)
         def __str__(self):
             return "point1 : {}, point2 : {}".format(self.point1, self.point2)
   #+END_SRC

   [[https://owncloud.lal.in2p3.fr/index.php/s/T8vcv18yCRozS3y][Fichier test]] des deux précédentes classes

   #+BEGIN_SRC python :tangle scripts/test_vector2d.py
     import point as p
     point1 = p.Point(3,4)
     point2 = p.Point(2,7)
     point3 = point1 + point2
     print(point1)
     print(point2)
     print(point3)

     import vector2d as v2d
     vector = v2d.Vector2D(point1, point2)
     print(vector)
     print("norm = " + str(vector.norm()))
   #+END_SRC

* Footnotes

[fn:1da3e3a46156a060] je plaisante ! ne le faites pas
