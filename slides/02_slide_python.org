#+TITLE:  /Containers/ et autres fonctions
#+AUTHOR: Xavier Garrido
#+DATE:   14/01/2020
#+OPTIONS: toc:nil ^:{} author:nil
#+STARTUP:     beamer
#+LATEX_CLASS: python-slide

* Les séquences ou /containers/

- En plus des types fondamentaux, Python propose nativement un ensemble d'objets
  à accès séquentiel dont :
  - les chaînes de caractère
  - les listes & /tuples/
  - les dictionnaires

* Les chaînes de caractères

#+BEGIN_SRC python
  In [1]: citation = "Une noisette, j'la casse entre mes fesses tu vois... JCVD"

  In [2]: type(citation)
  Out[2]: str

  In [3]: len(citation)
  Out[3]: 57
#+END_SRC

#+BEGIN_REMARK
La fonction =len()= comme la fonction =type()= sont toutes deux des fonctions
intégrées au langage Python
#+END_REMARK

* Les chaînes de caractères
#+BEAMER: \framesubtitle{Apostrophe, guillemets \& triple guillemets}

#+ATTR_BEAMER: :overlay +-
- Chaîne de caractères délimitée par des guillemets
 #+BEGIN_SRC python
    In [1]: "Une noisette, j'la casse entre mes fesses tu vois... JCVD"
  #+END_SRC

- Chaîne de caractères délimitée par de simples apostrophes
 #+BEGIN_SRC python
   In [1]: 'Une noisette, j'la casse entre mes fesses tu vois... JCVD'
     File "<ipython-input-17-39c8b67fd376>", line 1
       'Une noisette, j'la casse entre mes fesses tu vois... JCVD'

   SyntaxError: invalid syntax
 #+END_SRC

 #+BEGIN_SRC python
   In [2]: 'Une noisette, j\'la casse entre mes fesses tu vois... JCVD'
 #+END_SRC

* Les chaînes de caractères
#+BEAMER: \framesubtitle{Apostrophe, guillemets \& triple guillemets}

- Chaîne de caractères délimitée par des guillemets
 #+BEGIN_SRC python
    In [1]: "Une noisette, j'la casse entre mes fesses tu vois... JCVD"
  #+END_SRC

- Chaîne de caractères délimitée par de simples apostrophes
 #+BEGIN_SRC python
   In [2]: 'Une noisette, j\'la casse entre mes fesses tu vois... JCVD'
 #+END_SRC

- Chaîne de caractères délimitée par des triples guillemets \to *documentation de
  fonctions*
 #+BEGIN_SRC python
   In [3]: """Une noisette,
   j'la casse entre mes fesses tu vois...
   JCVD"""
 #+END_SRC

* Les chaînes de caractères
#+BEAMER: \framesubtitle{Les méthodes associées}

- Les méthodes ou fonctions membres associées aux objets de type =str= sont
  accessibles par le biais de *l'opérateur =.=*

  #+BEAMER:\pause
  #+BEGIN_SRC python
    In [1]: question = "Qu'est-ce qu'un chat qui travaille à la SNCF ?"

    In [2]: question.upper()
    Out[2]: "QU'EST-CE QU'UN CHAT QUI TRAVAILLE À LA SNCF ?"
  #+END_SRC

  #+BEAMER:\pause
  #+BEGIN_SRC python
    In [3]: reponse = "un cheminou"

    In [4]: reponse.capitalize().center(20)
    Out[4]: '    Un cheminou     '

    In [5]: reponse.capitalize().center(20).strip()
    Out[5]: 'Un cheminou'
  #+END_SRC

#+BEAMER:\pause
- L'ensemble de ces méthodes sont accessibles /via/ l'aide en ligne de =ipython= /i.e./
  =help(str)= ou en usant de la complétion soit =reponse.<TAB>=

* Les chaînes de caractères
#+BEAMER: \framesubtitle{Parcours \& sélection de chaînes}

- Parcours par indice : =str[indice]=
  #+BEGIN_SRC python
    In [1]: citation = "Chuck Norris a déjà compté jusqu'à l'infini. Deux fois."

    In [2]: citation[0]
    Out[2]: 'C'

    In [3]: citation[2]
    Out[3]: 'u'

    In [4]: citation[-1]
    Out[4]: '.'
  #+END_SRC

* Les chaînes de caractères
#+BEAMER: \framesubtitle{Parcours \& sélection de chaînes}

- Sélection de sous-chaînes : =str[début:fin:pas]=
  #+BEGIN_SRC python
    In [1]: citation = "Chuck Norris a déjà compté jusqu'à l'infini. Deux fois."

    In [2]: citation[0:5]
    Out[2]: 'Chuck'

    In [3]: citation[2:4]
    Out[3]: 'uc'

    In [4]: citation[:5]
    Out[4]: 'Chuck'

    In [5]: citation[5:]
    Out[5]: " Norris a déjà compté jusqu'à l'infini. Deux fois."

    In [6]: citation[::2]
    Out[6]: "CukNri  éàcmt uq' 'nii exfi."

    In [7]: citation[::-1]
    Out[7]: ".siof xueD .inifni'l à'uqsuj étpmoc àjéd a sirroN kcuhC"
  #+END_SRC

* Les chaînes de caractères
#+BEAMER: \framesubtitle{Parcours \& sélection de chaînes}

- Remplacement de sous-chaînes :
  #+BEGIN_SRC python
    In [1]: citation = "Chuck Norris a déjà compté jusqu'à l'infini. Deux fois."

    In [2]: citation[6] = "D"
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    <ipython-input-53-7080d03086cc> in <module>()
    ----> 1 citation[6] = "D"

    TypeError: 'str' object does not support item assignment
  #+END_SRC

  #+BEAMER: \pause
  #+BEGIN_REMARK
  Une chaîne de caractères est _un objet non /mutable/_ : on ne peut modifier
  l'objet qu'à la condition de créer une nouvelle référence en mémoire !
  #+END_REMARK

* Les chaînes de caractères
#+BEAMER: \framesubtitle{Parcours \& sélection de chaînes}

#+ATTR_BEAMER: :overlay +-
- Remplacement de sous-chaînes :
  #+BEGIN_SRC python
    In [1]: citation = "Chuck Norris a déjà compté jusqu'à l'infini. Deux fois."
    In [2]: id(citation)
    Out[2]: 139717789098984

    In [3]: citation = citation[0:6] + "D" + citation[7:]
    In [4]: id(citation)
    Out[4]: 139717714061872
  #+END_SRC

- Pour le remplacement de sous-chaînes, on tirera profit de la méthode =replace=
  associée aux méthodes =index= et =find=
  #+BEGIN_SRC python
    In [1]: citation = "Chuck Norris a déjà compté jusqu'à l'infini. Deux fois."
    In [2]: citation = citation.replace("Chuck Norris", "Patrick Puzo")
  #+END_SRC

* Les chaînes de caractères
#+BEAMER: \framesubtitle{Opérations logiques et arithmétiques}

#+ATTR_BEAMER: :overlay +-
- Vérification de présence :
  #+BEGIN_SRC python
    In [1]: citation = "Chuck Norris a déjà compté jusqu'à l'infini. Deux fois."
    In [2]: "Chuck" in citation
    Out[2]: True

    In [3]: "Patrick" not in citation
    Out[3]: True
  #+END_SRC

- Concaténation :
  #+BEGIN_SRC python
    In [1]: citation * 2
    Out[1]: "Chuck Norris a déjà [...].Chuck Norris a déjà [...]"

    In [2]: citation = "Chuck Norris a déjà compté jusqu'à l'infini. Deux fois."
    In [3]: citation + "Mais seulement " + str(1) + " fois jusqu'à moins l'infini."
  #+END_SRC

* COMMENT Les chaînes de caractères
#+BEAMER: \framesubtitle{Format et \emph{Formatage}}

- Utilisation des formats de données du C[fn:20089b4921487a8]
  #+BEGIN_SRC python
    In [1]: "Un entier: %i; un nombre flottant: %f; une chaîne : %s" % (1, 0.1, "toto")
    Out[1]: 'Un entier: 1; un nombre flottant: 0.100000; une chaîne : toto'

    In [2]: i = 2
    In [3]: filename = "processing_of_dataset_%03d.txt" % i
    In [4]: filename
    Out[4]: 'processing_of_dataset_002.txt'
  #+END_SRC

* Les chaînes de caractères
#+BEAMER: \framesubtitle{Format et \emph{Formatage}}

- Utilisation de la méthode =format=[fn:14f65e5336818de0]
  #+BEGIN_SRC python
    In [1]: canevas = "Nom: {}, prénom: {}, date de naissance: {}"

    In [2]: canevas.format("Van Rossum", "Guido", "31/01/1956")
    Out[2]: 'Nom: Van Rossum, prénom: Guido, date de naissance: 31/01/1956'
  #+END_SRC

  #+BEAMER:\pause
  #+BEGIN_SRC python
    In [1]: canevas = "Nom: {nom}, prénom: {prenom}, date de naissance: {date}"

    In [2]: canevas.format(date="31/01/1956", nom="Van Rossum", prenom="Guido")
    Out[2]: 'Nom: Van Rossum, prénom: Guido, date de naissance: 31/01/1956'
  #+END_SRC

  #+BEAMER:\pause
  #+BEGIN_SRC python
    In [1]: canevas = "L'année {0:d} s'écrit {0:b} en binaire et {0:x} en héxadécimal"

    In [2]: canevas.format(2023)
    Out[2]: "L'année 2023 s'écrit 11111100111 en binaire et 7e7 en héxadécimal"
  #+END_SRC
* Les chaînes de caractères
#+BEAMER: \framesubtitle{\emph{f-string}}

  #+BEGIN_SRC python
    In [1]: nom, prenom, age = "Van Rossum", "Guido", 64
    In [2]: print(f"Nom: {nom}, prénom: {prenom}, age: {age}")
    
    Out[2]: 'Nom: Van Rossum, prénom: Guido, age: 64'
  #+END_SRC

* Les listes
#+BEAMER: \framesubtitle{Initialisation d'une liste}

#+ATTR_BEAMER: :overlay +-
- Une liste est un objet qui permet de stocker *une collection d'objets de tous
  types*

- Initialisation d'une liste
  #+BEGIN_SRC python
    In [1]: bazar = []

    In [2]: bazar = ["rouge", "vert", "bleu", "noir"]

    In [3]: bazar = [1, 2, 3, 4]

    In [4]: bazar = [1, 2, "bleu", 3, 4]

    In [5]: type(bazar)
    Out[5]: list
  #+END_SRC

* Les listes
#+BEAMER: \framesubtitle{Initialisation d'une liste}

#+ATTR_BEAMER: :overlay +-
- Conversion en liste
  #+BEGIN_SRC python
    In [1]: bazar = list(range(4))
    In [2]: bazar
    Out[2]: [0, 1, 2, 3]

    In [3]: bazar = list("abcdef")
    In [4]: bazar
    Out[4]: ['a', 'b', 'c', 'd', 'e', 'f']
  #+END_SRC

- Initialisation d'une liste « en compréhension »
  #+BEGIN_SRC python
    In [1]: bazar = [x**2 for x in range(4)]
    In [2]: bazar
    Out[2]: [0, 1, 4, 9]

    In [3]: [x**2 for x in range(1, 100) if x % 10 == 3]
    Out[3]: [9, 169, 529, 1089, 1849, 2809, 3969, 5329, 6889, 8649]
  #+END_SRC

* Les listes
#+BEAMER: \framesubtitle{Manipulation d'une liste}

- Accès par indice
  #+BEGIN_SRC python
    In [1]: kebab = ["salade", "tomates", "oignons", "sauce blanche"]

    In [2]: kebab[2]
    Out[2]: 'oignons'

    In [3]: kebab[-1]
    Out[3]: 'sauce blanche'
    In [4]: kebab[-2]
    Out[4]: 'oignons'

    In [5]: kebab[1:3]
    Out[5]: ['tomates', 'oignons']

    In [6]: kebab[0] = "sans salade"
    In [7]: kebab
    Out[7]: ['sans salade', 'tomates', 'oignons', 'sauce blanche']
  #+END_SRC

#+BEAMER: \pause
#+BEGIN_REMARK
À la différence des chaînes de caractères, les listes sont des objets _mutables_ !
#+END_REMARK

* Les listes
#+BEAMER: \framesubtitle{Manipulation d'une liste}

- Ajout & suppression d'éléments
  #+BEGIN_SRC python
    In [1]: kebab = ["salade", "tomates", "oignons", "sauce blanche"]

    In [2]: kebab.append("frites")
    In [3]: kebab
    Out[3]: ['salade', 'tomates', 'oignons', 'sauce blanche', 'frites']

    In [4]: kebab.pop()
    Out[4]: 'frites'
    In [5]: kebab
    Out[5]: ['salade', 'tomates', 'oignons', 'sauce blanche']

    In [6]: kebab.extend(['frites', 'coca'])
    In [7]: kebab
    Out[7]: ['salade', 'tomates', 'oignons', 'sauce blanche', 'frites', 'coca']

    In [8]: kebab.insert(3, "harissa")
    In [9]: kebab
    Out[9]: ['salade', 'tomates', 'oignons', 'harissa', 'sauce blanche', 'frites', 'coca']
  #+END_SRC

* Les listes
#+BEAMER: \framesubtitle{Manipulation d'une liste}

#+ATTR_BEAMER: :overlay +-
- Parcourir une liste
  #+BEGIN_SRC python
    In [1]: kebab = ["salade", "tomates", "oignons", "sauce blanche"]

    In [2]: for item in kebab:
       ...:     print(item)
    salade
    tomates
    oignons
    sauce blanche
  #+END_SRC

- Parcourir une liste en conservant l'indice
  #+BEGIN_SRC python
    In [1]: kebab = ["salade", "tomates", "oignons", "sauce blanche"]

    In [2]: for idx in range(len(kebab)):
       ...:     print(idx, kebab[idx])
    0 salade
    1 tomates
    2 oignons
    3 sauce blanche

    In [3]: for idx, item in enumerate(kebab):
       ...:     print(idx, item)
  #+END_SRC

* Les listes
#+BEAMER: \framesubtitle{Manipulation d'une liste}

- Tri de listes
  #+BEGIN_SRC python
    In [1]: kebab = ["salade", "tomates", "oignons", "sauce blanche"]

    In [2]: kebab.sort()
    In [3]: kebab
    Out[3]: ['oignons', 'salade', 'sauce blanche', 'tomates']

    In [4]: kebab.reverse()
    In [5]: kebab
    Out[5]: ['tomates', 'sauce blanche', 'salade', 'oignons']
  #+END_SRC

- Comme pour les chaînes de caractères, l'ensemble des méthodes associées aux
  objets de type =list= sont accessibles /via/ l'aide en ligne de =ipython= /i.e./
  =help(list)= ou en utilisant la complétion =kebab.<TAB>=

* Les /tuples/

- Un /tuple/ correspond à *une liste /immutable/*
  #+BEGIN_SRC python
    In [1]: kebab = ("salade", "tomates", "oignons", "sauce blanche")

    In [2]: kebab
    Out[2]: ('salade', 'tomates', 'oignons', 'sauce blanche')

    In [3]: type(kebab)
    Out[3]: tuple

    In[4]: kebab[0] = "saucisson"
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    <ipython-input-145-2c877a5b0218> in <module>()
    ----> 1 kebab[0] = "saucisson"

    TypeError: 'tuple' object does not support item assignment
 #+END_SRC

* Les dictionnaires

- Les dictionnaires sont des structures *mutables*, ordonnées, formées d’enregistrements de type
  *=clé:valeur=*

- Le seul moyen d’accéder à une valeur particulière est par l’intermédiaire de sa clé

  #+BEGIN_SRC python
    In [1]: tel = {"jacquie": 5752, "michel": 5578}

    In [2]: tel["adrien"] = 5915
    In [3]: tel
    Out[3]: {'jacquie': 5752, 'michel': 5578, 'adrien': 5915}

    In [4]: tel["michel"]
    Out[4]: 5578

    In [5]: tel.keys()
    Out[5]: dict_keys(['jacquie', 'michel', 'adrien'])

    In [6]: tel.values()
    Out[6]: dict_values([5752, 5578, 5915])

    In [7]: "adrien" in tel
    Out[7]: True
  #+END_SRC

* Les dictionnaires

- Les dictionnaires sont des structures *mutables*, ordonnées, formées d’enregistrements de type
  *=clé:valeur=*

- Le seul moyen d’accéder à une valeur particulière est par l’intermédiaire de sa clé

  #+BEGIN_SRC python
    In [1]: tel = {"jacquie": 5752, "michel": 5578, "adrien": 5915}

    In [2]: for key, value in tel.items():
       ...:     print(f"Clé/Valeur : {key.capitalize()}/{value}")

    Clé/Valeur : Jacquie/5752
    Clé/Valeur : Michel/5578
    Clé/Valeur : Adrien/5915
  #+END_SRC

* COMMENT Les dictionnaires

- *Tout objet /immutable/ peut servir de clé*

  #+BEAMER: \pause
  #+BEGIN_SRC python
    In [1]: tel = {["simpson", "homer"]: 5752, ["simpson", "lisa"]: 5578}
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    <ipython-input-1-164bdc165001> in <module>
    ----> 1 tel = {["simpson", "homer"]: 5752, ["simpson", "lisa"]: 5578}

    TypeError: unhashable type: 'list'
  #+END_SRC

  #+BEAMER: \pause
  #+BEGIN_SRC python
    In [2]: tel = {("simpson", "homer"): 5752, ("simpson", "lisa"): 5578}

    In [3]: tel["simpson", "homer"]
    Out[3]: 5752

    In [4]: tel["simspson", "bart"] = 8424

    In [5]: tel
    Out[5]: 
    {('simpson', 'homer'): 5752,
     ('simpson', 'lisa'): 5578,
     ('simspson', 'bart'): 8424}
  #+END_SRC

* COMMENT Intermède /geek/

#+ATTR_LATEX: :width 0.65\linewidth
[[file:figures/ineffective_sorts.png]]

#+BEAMER:\scriptsize\hfill$^\dagger$
[[http://xkcd.com/1185/][xkcd comic]]

* Les fonctions

- Une fonction est *un bloc d’instructions* qui a reçu *un nom*
- Une fonction peut :
  1) dépendre d’un certain nombre de paramètres \to *les arguments*
  2) renvoyer un résultat au moyen de l’instruction *=return=*

#+BEAMER: \pause
- Quelques fonctions intégrées au langage Python
  - =help= : aide sur un nom \to =help(dict)=
  - =input= : entrée au clavier \to =n = int(input("N ?"))=
  - =print= : affiche à l'écran \to =print(n)=
  - =type=, =sum=, =range=, =min/max=, ...

* Les fonctions
#+BEAMER: \framesubtitle{Déclaration de fonctions}

- Fonction sans argument et sans valeur de retour
  #+BEGIN_SRC python
    In [1]: def dummy():
       ...:     print("Fonction 'dummy'")
       ...:

    In [2]: dummy()
    Fonction 'dummy'
  #+END_SRC

#+BEAMER: \pause
#+BEGIN_REMARK
Par défaut, la valeur de retour d'une fonction est =None=
#+END_REMARK

* Les fonctions
#+BEAMER: \framesubtitle{Déclaration de fonctions}

- Fonction *avec argument et valeur de retour*
  #+BEGIN_SRC python
    In [1]: def aire_disque(rayon):
       ...:     return 3.14 * rayon**2
       ...:

    In [2]: aire_disque(1.5)
    Out[2]: 7.065

    In [3]: aire_disque()
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    <ipython-input-175-daee2592ca2a> in <module>()
    ----> 1 aire_disque()

    TypeError: aire_disque() missing 1 required positional argument: 'rayon'
  #+END_SRC

* Les fonctions
#+BEAMER: \framesubtitle{Déclaration de fonctions}

- Fonction *avec argument par défaut et valeur de retour*
  #+BEGIN_SRC python
    In [1]: def aire_disque(rayon=10.0):
       ...:     return 3.14 * rayon**2
       ...:

    In [2]: aire_disque(1.5)
    Out[2]: 7.065

    In [3]: aire_disque()
    Out[3]: 314.0

    In [4]: aire_disque(rayon=20)
    Out[4]: 1256.0

    In [5]: kwargs = {"rayon": 20}
    In [6]: aire_disque(**kwargs)
    Out[6]: 1256.0
  #+END_SRC

* Les fonctions
#+BEAMER: \framesubtitle{Déclaration de fonctions}

- Fonction *retournant plusieurs valeurs*
  #+BEGIN_SRC python
    In [1]: def decomposer(entier, diviseur):
       ...:     return entier // diviseur, entier % diviseur
       ...:

    In [2]: partie_entiere, reste = decomposer(20, 3)
    In [3]: partie_entiere, reste
    Out[3]: (6, 2)
  #+END_SRC

* Les fonctions
#+BEAMER: \framesubtitle{Fonctions $\lambda$}

- Les fonctions \lambda sont des fonctions dites *anonymes* /i.e./ sans nom
  pouvant être appliquée « à la volée » dans une expression

  #+BEAMER:\pause
  #+BEGIN_SRC python
    In [1]: f = lambda x: x**2
    In [2]: f(2)
    Out[2]: 4

    In [3]: g = lambda x, y, z: 100 * x + 10 * y + z
    In [4]: g(1, 2, 3)
    Out[4]: 123
  #+END_SRC

* Les fonctions
#+BEAMER: \framesubtitle{Documentation}

#+BEGIN_SRC python
  In [1]: def dummy():
     ...:     """Cette fonction ne sert strictement à rien.
     ...:
     ...:     En plus détaillé, cette fonction ne sert toujours
     ...:     à rien mais la description est plus longue.
     ...:     """

  In [2]: help(dummy)
      1 Help on function dummy in module __main__:
      2
      3 dummy()
      4     Cette fonction ne sert strictement à rien.
      5
      6     En plus détaillé, cette fonction ne sert toujours
      7     à rien mais la description est plus longue.
#+END_SRC

#+BEGIN_REMARK
Pour plus de détails sur les us et coutumes en matière de documentation /cf./
[[https://www.python.org/dev/peps/pep-0257/][/Docstrings conventions/]]
#+END_REMARK

* Les fonctions

- Les fonctions sont des objets ce qui implique qu'elles peuvent être :
  1) affectées à une variable
  2) un élément dans une séquence (liste, dictionnaires)
  3) passées comme argument à une autre fonction

  #+BEAMER:\pause
  #+BEGIN_SRC python
    In [1]: ad = aire_disque

    In [2]: ad(2)
    Out[2]: 12.56

    In [3]: table = {"Calcul de l'aire d'un disque" : ad}
    In [4]: table["Calcul de l'aire d'un disque"]()
    Out[4]: 314.0

    In [5]: decomposer(ad(), 2)
    Out[5]: (157.0, 0.0)
  #+END_SRC

* Scripts/modules, programmation orientée objet, librairie standard   :title:
:PROPERTIES:
:BEAMER_ENV: fullframe
:END:

#+BEGIN_EXPORT beamer
\title{Scripts/modules, programmation orientée objet, librairie standard}
\titlepage
#+END_EXPORT

* COMMENT Scripts/modules

#+ATTR_BEAMER: :overlay +-
- Jusqu'à présent l'ensemble des commandes ou blocs d'instructions ont été tapé
  et testé directement dans l'interpréteur =ipython=

  - @@beamer:\color{green}\faThumbsUp@@ :: @@beamer:\color{green}@@ permet de
       tester en intéractif le code et sa validité
  - @@beamer:\color{red}\faThumbsDown@@ :: @@beamer:\color{red}@@ rend difficile
       la réutilisation et la modification du code

- Plus la problématique deviendra compliquée, plus le besoin d'écrire du code
  dans un ou des fichiers, *scripts ou modules*, deviendra pertinente (test,
  maintenance, lecture du code...)

* Scripts =python=

- *Un script* est un fichier contenant un ensemble d'instructions =python=

- L'extension du fichier-script sera *=.py=* (indentation, coloration
  syntaxique...)

- Exemple =citation.py=
 #+BEGIN_SRC python -n
   citation = "Une noisette, j'la casse entre mes fesses tu vois... JCVD"
   for word in citation.split():
       print(word)
 #+END_SRC

* Scripts =python=

- Le script peut être lancé depuis le terminal /via/ la commande
  #+BEGIN_SRC python
    @\prompt@ python citation.py
  #+END_SRC

  ou directement dans l'interpréteur =ipython= en faisant
  #+BEGIN_SRC python
    In [1]: %run citation.py

    In [2]: citation
    Out[2]: "Une noisette, j'la casse entre mes fesses tu vois... JCVD"
  #+END_SRC

* Modules =python=

- À la différence d'un script, *un module =python=* est un fichier contenant un
  *ensemble de fonctions* pouvant être utilisées par différents scripts

- Exemple =jcvd_collection.py=
  #+BEGIN_SRC python -n :tangle /tmp/jcvd_collection.py
    """
       A file with a lot of JCVD inside

       This module holds several quotes from Jean-Claude Van Damme
    """

    def quote0():
        print("Une noisette, j'la casse entre mes fesses tu vois...")

    def quote1():
        print("Quand tu prends confiance en la confiance tu deviens confiant.")

    def quote2():
        print("Ce n'est pas moi qui parle...c'est nous qui parlons.")
  #+END_SRC

* Modules =python=

- Pour pouvoir utiliser le module et ses fonctions, *il est nécessaire de
  l'importer* soit dans un script ou soit dans l'interpréteur
  #+ATTR_BEAMER: :overlay +-
  1) Importation de base
     #+BEGIN_SRC python
       In [1]: import jcvd_collection
       In [2]: jcvd_collection.quote1()
       Quand tu prends confiance en la confiance tu deviens confiant.
     #+END_SRC

  2) Importation à l'aide d'un nom raccourci
     #+BEGIN_SRC python
       In [1]: import jcvd_collection as jcvd
       In [2]: jcvd.quote1()
       Quand tu prends confiance en la confiance tu deviens confiant.
     #+END_SRC

  3) Importation spécifique d'une fonction
     #+BEGIN_SRC python
       In [1]: from jcvd_collection import quote1
       In [2]: quote1()
       Quand tu prends confiance en la confiance tu deviens confiant.
     #+END_SRC

* COMMENT Modules =python=

#+BEGIN_REMARK
Lors de l'importation, le module est mis _en cache_ et il faut donc le recharger
pour que les modifications soient prises en compte
#+BEGIN_SRC python
  In [1]: import importlib
  In [2]: importlib.reload(jcvd_collection)
#+END_SRC
#+END_REMARK

* Modules =python=

- La fonction =help= permet d'accéder à la documentation du module
  #+BEGIN_SRC python
    In [1]: help(jcvd_collection)
  #+END_SRC

#+BEAMER: \pause

- Par défaut, la localisation des modules se fait dans différents répertoires
  #+ATTR_BEAMER: :overlay +-
  1) dans le répertoire local
  2) dans les répertoires définis au sein de la variable d'environnement
     =PYTHONPATH=
  3) dans l'ensemble des répertoires référencés par =sys.path=
     #+BEGIN_SRC python
       In [1]: import sys
       In [2]: sys.path
       ['',
        '/home/garrido/Development/python.d/ipython/bin',
        '/usr/lib/python36.zip',
        '/usr/lib/python3.6',
        '/usr/lib/python3.6/lib-dynload',
        '/home/garrido/Development/python.d/ipython/lib/python3.6/site-packages',
        '/home/garrido/Development/python.d/ipython/lib/python3.6/site-packages/IPython/extensions',
        '/home/garrido/.ipython']
  #+END_SRC

* Script & modules

- Il est possible de faire cohabiter au sein d'un même fichier un script et un
  module

  #+BEGIN_SRC python -n
    def quote0():
        print("Une noisette, j'la casse entre mes fesses tu vois...")

    def quote1():
        print("Quand tu prends confiance en la confiance tu deviens confiant.")

    def quote2():
        print("Ce n'est pas moi qui parle...c'est nous qui parlons.")

    # quote0() sera appelé lors du premier import et à chaque exécution
    quote0()

    if __name__ == "__main__":
        # quote2() ne sera appelé que lors de l'exécution
        quote2()
  #+END_SRC

* Script & modules

#+BEGIN_SRC python
  In [1]: import jcvd_collection
  Une noisette, j'la casse entre mes fesses tu vois...

  In [2]: import jcvd_collection

  In [3]: %run jcvd_collection.py
  Une noisette, j'la casse entre mes fesses tu vois...
  Ce n'est pas moi qui parle...c'est nous qui parlons.
#+END_SRC

* Programmation orientée objet

#+BEAMER: \pause
#+BEGIN_QUOTE
La programmation orientée objet (POO), ou programmation par objet, est *un paradigme de programmation
informatique* élaboré par les Norvégiens Ole-Johan Dahl et Kristen Nygaard au début des années 1960
et poursuivi par les travaux d'Alan Kay dans les années 1970.

Il consiste en la définition et l'interaction de briques logicielles appelées objets; *un objet*
*représente un concept, une idée ou toute entité du monde physique, comme une voiture, une personne
ou encore une page d'un livre*.

Il possède *une structure interne et un comportement*, et il sait interagir avec ses pairs. Il s'agit
donc de représenter ces objets et leurs relations; *l'interaction entre les objets via leurs
relations* permet de concevoir et réaliser les fonctionnalités attendues, de mieux résoudre le ou les
problèmes.

Dès lors, l'étape de modélisation revêt une importance majeure et nécessaire pour la POO. C'est elle
qui permet de transcrire les éléments du réel sous forme virtuelle.
#+END_QUOTE

#+BEAMER: \hspace{+9cm}
[[https://fr.wikipedia.org/wiki/Programmation_orient%C3%A9e_objet][/Wikipedia/]]

* Programmation orientée objet

#+ATTR_BEAMER: :overlay +-
- *Un objet* est une structure hébergeant des *données membres* (ou attributs) et
  des *fonctions membres* également appelées *méthodes*

- La représentation sous forme d'objet est parfaitement adaptée à la
  programmation graphique (/GUI/) et à la description des détecteurs en physique
  (des particules/nucléaire)

- Pour rappel, en Python tout est objet (variables, *fonctions*, classes)

* Programmation orientée objet

- Déclaration d'un objet/classe =Student=
  #+BEGIN_SRC python -n
    class Student:
        def __init__(self, name):
            self.name = name
        def set_age(self, age):
            self.age = age
        def set_mark(self, mark):
            self.mark = mark
  #+END_SRC

#+BEAMER: \pause

- *Données membres* : =name=, =age= et =mark=

- *Méthodes* : =__init__=, =set_age=, =set_mark=

* Programmation orientée objet

- Création d'un objet de type =Student=
  #+BEGIN_SRC python -n
    student = Student("Patrick Puzo")
    student.set_age(50)
    student.set_mark(0.0)

    print("Résultat de {} : {}/20".format(student.name, student.mark))
  #+END_SRC

* COMMENT Gestion des exceptions en Python

#+ATTR_BEAMER: :overlay +-
- Les exceptions sont la conséquence d'erreurs fonctionnelles
  - erreur lors d'un résultat indéfini
     #+BEGIN_SRC python
       In [1]: 0/0
       ---------------------------------------------------------------------------
       ZeroDivisionError                         Traceback (most recent call last)
       <ipython-input-1-6549dea6d1ae> in <module>()
       ----> 1 0/0

       ZeroDivisionError: division by zero
     #+END_SRC

  - erreur typographique dans le nom d'une fonction
     #+BEGIN_SRC python
       In [1]: import jcvd_collection
       In [2]: quot1()
       ---------------------------------------------------------------------------
       NameError                                 Traceback (most recent call last)
       <ipython-input-4-2459ec87cda3> in <module>()
       ----> 1 quot1()

       NameError: name 'quot1' is not defined
     #+END_SRC

* COMMENT Gestion des exceptions en Python

- Pour "attraper" les exceptions avant qu'elles ne causent l'arrêt du programme,
  on utilise les instructions *=try/except=*
  #+BEGIN_SRC python
    In [1]: while True:
       ...:     try:
       ...:         x = int(input("Veuillez saisir un nombre: "))
       ...:         break
       ...:     except ValueError:
       ...:         print("Je crois avoir demandé un nombre !")
       ...:
    Veuillez saisir un nombre: a
    Je crois avoir demandé un nombre !
    Veuillez saisir un nombre: 11
  #+END_SRC

* COMMENT Gestion des exceptions en Python

- Pour "lever" une exception, on utilise l'instruction *=raise=*...
  #+BEGIN_SRC python
    In [1]: def achilles_arrow(x):
       ...:    if abs(x - 1) < 1e-3:
       ...:        raise StopIteration
       ...:    x = 1 - (1-x)/2.
       ...:    return x
       ...:
  #+END_SRC

  #+BEAMER:\pause
- ... pour mieux pouvoir la récupérer dans un second bloc
  #+BEGIN_SRC python
    In [18]: x = 0
    In [19]: while True:
        ...:     try:
        ...:         x = achilles_arrow(x)
        ...:     except StopIteration:
        ...:         break
        ...:

    In [20]: x
    Out[20]: 0.9990234375
  #+END_SRC

* Entrées/sorties

- La fonction intégrée *=print=* permet d'afficher à l'écran n'importe quelle chaîne
  de caractères
  #+BEGIN_SRC python
    In [1]: print("Qu'est qu'un chat qui voit dans le futur ?")
  #+END_SRC

#+BEAMER: \pause

- La fonction intégrée *=input=* permet de récupérer une saisie clavier sous la
  forme d'une chaîne de caractères
  #+BEGIN_SRC python
    In [2]: reponse = input("Réponse ? ")
  #+END_SRC

* Entrées/sorties

- L'écriture dans un fichier se fait nécessairement par le biais de chaîne de
  caractères
  #+BEGIN_SRC python
    In [1]: f = open("QA.txt", "w")
    In [2]: f.write("Qu'est qu'un chat qui voit dans le futur ?")
    In [3]: f.close()
  #+END_SRC

* Entrées/sorties

- La lecture dans un fichier peut se faire de la façon suivante...
  #+BEGIN_SRC python
    In [1]: f = open("QA.txt", "r")
    In [2]: s = f.read()
    In [3]: print(s)
    Qu'est qu'un chat qui voit dans le futur ?
    In [4]: f.close()
  #+END_SRC

#+BEAMER: \pause

- ...ou en lisant le fichier ligne par ligne
  #+BEGIN_SRC python
    In [1]: with open("QA.txt", "r") as f:
       ...:     for line in f:
       ...:         print(line)
       ...:
  #+END_SRC

  L'instruction =with= assure que le fichier sera fermé quoiqu'il advienne
  notamment si une exception est levée

* Librairie standard
#+BEAMER: \framesubtitle{Module \texttt{os} : interaction avec le système d'exploitation}

- Importation du module =os=
  #+BEGIN_SRC python
    In [1]: import os
  #+END_SRC

- Récupérer le nom du répertoire courant
  #+BEGIN_SRC python
    In [1]: os.getcwd()
  #+END_SRC

- Lister les fichiers présents dans le répertoire courant
  #+BEGIN_SRC python
    In [1]: os.listdir(os.curdir)
  #+END_SRC

* Librairie standard
#+BEAMER: \framesubtitle{Module \texttt{os} : interaction avec le système d'exploitation}

- Créer un répertoire
  #+BEGIN_SRC python
    In [1]: os.mkdir("junkdir")

    In [2]: "junkdir" in os.listdir(os.curdir)
    Out[2]: True
  #+END_SRC

- Renommer et supprimer un répertoire
  #+BEGIN_SRC python
    In [1]: os.rename("junkdir", "foodir")

    In [2]: os.rmdir("foodir")
    In [3]: "foodir" in os.listdir(os.curdir)
    Out[3]: False
  #+END_SRC

- Supprimer un fichier
  #+BEGIN_SRC python
    In [1]: os.remove("junk.txt")
  #+END_SRC

* Librairie standard
#+BEAMER: \framesubtitle{Module \texttt{os} : Manipulation des chemins d'accès avec \texttt{os.path}}

#+BEGIN_SRC python
  In [1]: %mkdir /tmp/python.d
  In [2]: cd /tmp/python.d

  In [3]: fp = open("junk.txt", "w"); fp.close()

  In [4]: a = os.path.abspath("junk.txt")

  In [5]: a
  Out[5]: '/tmp/python.d/junk.txt'

  In [6]: os.path.split(a)
  Out[6]: ('/tmp/python.d', 'junk.txt')

  In [7]: os.path.dirname(a)
  Out[7]: '/tmp/python.d'

  In [8]: os.path.basename(a)
  Out[8]: 'junk.txt'

  In [9]: os.path.splitext(os.path.basename(a))
  Out[9]: ('junk', '.txt')
#+END_SRC

* Librairie standard
#+BEAMER: \framesubtitle{Module \texttt{os} : Manipulation des chemins d'accès avec \texttt{os.path}}

#+BEGIN_SRC python
  In [10]: os.path.exists("junk.txt")
  Out[10]: True

  In [11]: os.path.isfile("junk.txt")
  Out[11]: True

  In [12]: os.path.isdir("junk.txt")
  Out[12]: False

  In [13]: os.path.expanduser("~/local")
  Out[13]: '/home/jcvd/local'

  In [14]: os.path.join(os.path.expanduser("~"), "local", "bin")
  Out[14]: '/home/jcvd/local/bin'
#+END_SRC

* Librairie standard
#+BEAMER: \framesubtitle{Module \texttt{os} : Parcourir un répertoire avec \texttt{os.walk}}

#+BEGIN_SRC python
  In [1]: for i in range(4):
     ...:     open("junk" + str(i) + ".txt", "w")

  In [2]: for dirpath, dirnames, filenames in os.walk(os.curdir):
     ...:     for f in filenames:
     ...:         print(os.path.abspath(f))
  /tmp/python.d/junk3.txt
  /tmp/python.d/junk2.txt
  /tmp/python.d/junk1.txt
  /tmp/python.d/junk0.txt
  /tmp/python.d/junk.txt

  In [3]: import glob
  In [4]: for f in glob.glob("*.txt"):
     ...:     os.remove(f)
#+END_SRC

* Librairie standard
#+BEAMER: \framesubtitle{Module \texttt{os} : Exécuter une commande système}

#+BEGIN_SRC python
  In [1]: os.system("ls")
#+END_SRC

#+BEGIN_REMARK
Pour intéragir /via/ des commandes systèmes, on priviligiera toutefois
[[http://amoffat.github.io/sh/][le module =sh=]] qui, en plus d'être plus
complet, fournit des outils pour récupérer le résultat de la commande, les
éventuelles erreurs, le code erreur.
#+END_REMARK

* Librairie standard
#+BEAMER: \framesubtitle{Module \texttt{sys} : Information système}

#+BEGIN_SRC python
  In [1]: import sys

  In [2]: sys.platform
  Out[2]: 'linux'

  In [3]: print(sys.version)
  3.6.0 (default, Jan 16 2017, 12:12:55)
  [GCC 6.3.1 20170109]
#+END_SRC

* Librairie standard
#+BEAMER: \framesubtitle{Sérialisation d'objets : \texttt{pickle}}

#+BEGIN_SRC python
In [1]: import pickle

In [2]: l = [1, None, "Stan"]

In [3]: pickle.dump(l, open("test.pkl", "wb"))

In [4]: pickle.load(open("test.pkl", "rb"))
Out[4]: [1, None, "Stan"]
#+END_SRC

* Footnotes

[fn:20089b4921487a8] /cf./ [[https://en.wikipedia.org/wiki/Printf_format_string][C-style format]]

[fn:14f65e5336818de0] /cf./ [[https://docs.python.org/3/library/string.html#new-string-formatting][Python 3 string format]]
